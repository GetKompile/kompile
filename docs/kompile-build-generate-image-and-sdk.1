'\" t
.\"     Title: kompile-build-generate-image-and-sdk
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2022-07-09
.\"    Manual: Kompile Manual
.\"    Source: 
.\"  Language: English
.\"
.TH "KOMPILE\-BUILD\-GENERATE\-IMAGE\-AND\-SDK" "1" "2022-07-09" "" "Kompile Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
kompile\-build\-generate\-image\-and\-sdk \- Generate and build a python SDK using an embedded shell script. Pass parameters down to the shell script using the parameters below. This command may require additional tools such as graalvm, maven and a local compiler such as gcc to run correctly.
.SH "SYNOPSIS"
.sp
\fBkompile build generate\-image\-and\-sdk\fP [\fB\-\-buildSharedLibrary\fP]
[\fB\-\-enableJetsonNano\fP] [\fB\-\-noGc\fP]
[\fB\-\-binaryExtension\fP=\fI<binaryExtension>\fP]
[\fB\-\-buildPlatform\fP=\fI<buildPlatform>\fP]
[\fB\-\-bundleOutputPath\fP=\fI<bundleOutputPath>\fP]
[\fB\-\-imageName\fP=\fI<imageName>\fP]
[\fB\-\-includePath\fP=\fI<includePath>\fP]
[\fB\-\-kompileCPath\fP=\fI<kompileCPath>\fP]
[\fB\-\-kompilePrefix\fP=\fI<kompilePrefix>\fP]
[\fB\-\-kompilePythonPath\fP=\fI<kompilePythonPath>\fP]
[\fB\-\-libOutputPath\fP=\fI<libOutputPath>\fP]
[\fB\-\-mainClass\fP=\fI<mainClass>\fP]
[\fB\-\-mavenHome\fP=\fI<mavenHome>\fP]
[\fB\-\-maxRamMegs\fP=\fI<maxRamMegs>\fP]
[\fB\-\-minRamMegs\fP=\fI<minRamMegs>\fP]
[\fB\-\-nativeImageFilesPath\fP=\fI<nativeImageFilesPa\fP
_                   th>_] [\fB\-\-nd4jBackend\fP=\fI<nd4jBackend>\fP]
[\fB\-\-nd4jClassifier\fP=\fI<nd4jClassifier>\fP]
[\fB\-\-pipelineFile\fP=\fI<pipelineFile>\fP]
[\fB\-\-pomGenerateOutputPath\fP=\fI<pomGenerateOutput\fP
_                  Path>_] [\fB\-\-protocol\fP=\fI<protocol>\fP]
[\fB\-\-pythonExecutable\fP=\fI<pythonExecutable>\fP]
.SH "DESCRIPTION"
.sp
Generate and build a python SDK using an embedded shell script. Pass parameters down to the shell script using the parameters below. This command may require additional tools such as graalvm, maven and a local compiler such as gcc to run correctly.
.SH "OPTIONS"
.sp
\fB\-\-binaryExtension\fP=\fI<binaryExtension>\fP
.RS 4
The platform to build for, usually a javacpp.platform value such as linux\-x86_64
.RE
.sp
\fB\-\-buildPlatform\fP=\fI<buildPlatform>\fP
.RS 4
The platform to build for, usually a javacpp.platform value such as linux\-x86_64
.RE
.sp
\fB\-\-buildSharedLibrary\fP
.RS 4
Whether to build a shared library or not, defaults to true
.RE
.sp
\fB\-\-bundleOutputPath\fP=\fI<bundleOutputPath>\fP
.RS 4
Path to output file of complete bundle
.RE
.sp
\fB\-\-enableJetsonNano\fP
.RS 4
Whether to use jetson nano dependencies or not
.RE
.sp
\fB\-\-imageName\fP=\fI<imageName>\fP
.RS 4
Name of image output file
.RE
.sp
\fB\-\-includePath\fP=\fI<includePath>\fP
.RS 4
Location of include path for compilation/linking
.RE
.sp
\fB\-\-kompileCPath\fP=\fI<kompileCPath>\fP
.RS 4
Path to kompile c library
.RE
.sp
\fB\-\-kompilePrefix\fP=\fI<kompilePrefix>\fP
.RS 4
The kompile prefix where the relevant kompile source code is for compilation.
.RE
.sp
\fB\-\-kompilePythonPath\fP=\fI<kompilePythonPath>\fP
.RS 4
Path to kompile python sdk
.RE
.sp
\fB\-\-libOutputPath\fP=\fI<libOutputPath>\fP
.RS 4
Location of where to put c library after compilation
.RE
.sp
\fB\-\-mainClass\fP=\fI<mainClass>\fP
.RS 4
The entry point to use in the image
.RE
.sp
\fB\-\-mavenHome\fP=\fI<mavenHome>\fP
.RS 4
The maven home location for compiling native image
.RE
.sp
\fB\-\-maxRamMegs\fP=\fI<maxRamMegs>\fP
.RS 4
The maximum memory usage for the image
.RE
.sp
\fB\-\-minRamMegs\fP=\fI<minRamMegs>\fP
.RS 4
The minimum memory usage for the image
.RE
.sp
\fB\-\-nativeImageFilesPath\fP=\fI<nativeImageFilesPath>\fP
.RS 4
The path to the files for building an image
.RE
.sp
\fB\-\-nd4jBackend\fP=\fI<nd4jBackend>\fP
.RS 4
The nd4j backend to use in the image
.RE
.sp
\fB\-\-nd4jClassifier\fP=\fI<nd4jClassifier>\fP
.RS 4
The nd4j classifier to use
.RE
.sp
\fB\-\-noGc\fP
.RS 4
Whether to use gc in the image or not
.RE
.sp
\fB\-\-pipelineFile\fP=\fI<pipelineFile>\fP
.RS 4
Whether to use a pipeline file or not
.RE
.sp
\fB\-\-pomGenerateOutputPath\fP=\fI<pomGenerateOutputPath>\fP
.RS 4
Output path of the generated pom.xml for compiling native image
.RE
.sp
\fB\-\-protocol\fP=\fI<protocol>\fP
.RS 4
Protocol to use for serving, http or grpc are valid
.RE
.sp
\fB\-\-pythonExecutable\fP=\fI<pythonExecutable>\fP
.RS 4
The executable to use with python. Defaults to the python found on the path. Otherwise will use the built in python installed with ./kompile install python
.RE
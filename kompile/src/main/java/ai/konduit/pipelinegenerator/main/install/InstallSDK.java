/*
 * Copyright (c) 2022 Konduit K.K.
 *
 *     This program and the accompanying materials are made available under the
 *     terms of the Apache License, Version 2.0 which is available at
 *     https://www.apache.org/licenses/LICENSE-2.0.
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *     WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *     License for the specific language governing permissions and limitations
 *     under the License.
 *
 *     SPDX-License-Identifier: Apache-2.0
 */

package ai.konduit.pipelinegenerator.main.install;

import ai.konduit.pipelinegenerator.main.Info;
import org.zeroturnaround.exec.ProcessExecutor;
import picocli.CommandLine;

import java.io.File;
import java.util.Arrays;
import java.util.concurrent.Callable;
@CommandLine.Command(name = "sdk-install",mixinStandardHelpOptions = false,description = "Installs a python wheel generated from the generate-sdk command to the local python managed by kompile.")
public class InstallSDK implements Callable<Integer> {
    @CommandLine.Option(names = {"--pathToWheel"},description = "Path to a python wheel generated by the generate-image-and-sdk command.",required = true)
    private File pathToWheel;

    public InstallSDK() {
    }

    @Override
    public Integer call() throws Exception {
        File pythonDir = Info.pythonDirectory();
        File pipExec = new File(pythonDir,"bin/pip");
        int   exitValue =  new ProcessExecutor().environment(System.getenv())
                .command(Arrays.asList(pipExec.getAbsolutePath() ,"install" ,pathToWheel.getAbsolutePath()))
                .readOutput(true)
                .redirectOutput(System.out)
                .start().getFuture().get().getExitValue();
        return exitValue;
    }
}

/*
 * Copyright (c) 2022 Konduit K.K.
 *
 *     This program and the accompanying materials are made available under the
 *     terms of the Apache License, Version 2.0 which is available at
 *     https://www.apache.org/licenses/LICENSE-2.0.
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *     WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *     License for the specific language governing permissions and limitations
 *     under the License.
 *
 *     SPDX-License-Identifier: Apache-2.0
 */

package ai.konduit.pipelinegenerator.main.config.updater;

import ai.konduit.pipelinegenerator.main.converter.IScheduleTypeConverter;
import ai.konduit.serving.pipeline.util.ObjectMappers;
import org.apache.commons.io.FileUtils;
import org.nd4j.linalg.learning.regularization.L1Regularization;
import org.nd4j.linalg.learning.regularization.L2Regularization;
import org.nd4j.linalg.learning.regularization.Regularization;
import org.nd4j.linalg.learning.regularization.WeightDecay;
import org.nd4j.linalg.schedule.*;
import picocli.CommandLine;

import java.io.File;
import java.nio.charset.Charset;
import java.util.Collections;
import java.util.concurrent.Callable;

@CommandLine.Command(name = "generate-regularization-config",mixinStandardHelpOptions = false,description = "Generates an updater configuration. Used in combination with samediff training to specify an updater to use.")
public class RegularizationGenerator implements Callable<Integer> {
    @CommandLine.Option(names = {"--schedule"},description = "path to a json file containing a schedule configuration generated by ./kompile config generate-schedule-config",required = false,converter = IScheduleTypeConverter.class)
    private ISchedule schedule;
    @CommandLine.Option(names = {"--regularizationType"},description = "a regularization configuration type: l2,l1",required = false)
    private String regularizationType;
    @CommandLine.Option(names = {"--l2Value"},description = "an l2 coefficient for regularization",required = false)
    private Double l2Value;
    @CommandLine.Option(names = {"--l1Value"},description = "an l1 coefficient for regularization",required = false)
    private Double l1Value;
    @CommandLine.Option(names = {"--weightDecayCoefficient"},description = "an weightDecayCoefficient  for weight decay regularization",required = false)
    private Double weightDecayCoefficient;
    @CommandLine.Option(names = {"--applyLearningRateWeightDecay"},description = "an whether to apply learning rate  for weight decay regularization",required = false)
    private Boolean applyLearningRateWeightDecay;


    public RegularizationGenerator() {
    }

    @Override
    public Integer call() throws Exception {
        Regularization regularization = null;
        switch(regularizationType) {
            case "l2":
                if(l2Value != null)
                    regularization = new L2Regularization(l2Value);
                else if(schedule != null)
                    regularization = new L2Regularization(schedule);
                else {
                    System.err.println("Please specify a regularization l2 coefficient or schedule.");
                    return 1;
                }
                break;
            case "l1":
                if(l1Value != null)
                    regularization = new L1Regularization(l2Value);
                else if(schedule != null)
                    regularization = new L1Regularization(schedule);
                else {
                    System.err.println("Please specify a regularization l2 coefficient or schedule.");
                    return 1;
                }
                break;
            case "weightdecay":
                if(weightDecayCoefficient != null && applyLearningRateWeightDecay != null) {
                    regularization = new WeightDecay(weightDecayCoefficient,applyLearningRateWeightDecay);
                } else if(schedule != null && applyLearningRateWeightDecay != null) {
                    regularization = new WeightDecay(schedule,applyLearningRateWeightDecay);
                } else {
                    System.err.println("weightdecay regularization specified, but missing either schedule,weightDecayCoefficient, or applyLearningRateWeightDecay arguments. Specify all to create a valid regularization configuration.");
                }
                break;

        }

        if(regularization == null) {
            System.err.println("Invalid regularization configuration. Exiting.");
            return 1    ;
        }


        System.out.println(ObjectMappers.toJson(regularization));
        return 0;
    }
}
